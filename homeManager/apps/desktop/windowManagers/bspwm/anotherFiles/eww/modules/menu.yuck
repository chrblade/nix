(defvar AVATAR "otherFiles/menu/avatar.png")
(defpoll GOOD :interval "99s" "scripts/menu/good.sh")
(defpoll MEM_MENU :interval "15s" "scripts/menu/mem_menu.sh")
(defpoll VOL_PERC :interval "6s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll MIC_PERC :interval "6s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll DAT_MEN :interval "10s" "date +'%Y-%m-%d'")

;(defwidget menu-right []
;  (box :orientation "h"
;       :hexpand "false"
;       :vexpand "false"
;       (menu-vol)))


;(defwidget menu-vol []
;  (box :orientation "h"
;       :class "menu-vol-module"
;       :space-evenly "false"
;       (box :orientation "v"
;            :class "menu-vol-scale_one"
;         (scale :min 0
;                :max 100
;                :active {VOL_PERC != "muted"}
;                :value {VOL_PERC == "muted" ? 0 : VOL_PERC}
;                :onchange "pamixer --set-volume {}"
;                :class "menu-vol-scale"
;                :flipped "true"
;                :orientation "v")
;         (label :class "menu-vol-scale-text"
;                :text VOL))
;       (box :orientation "v"
;            :class "menu-vol-scale_two"
;            :space-evenly "false"
;            :spacing "20"
;         (scale :min 0
;                :max 100
;                :value MIC_PERC
;                :onchange "pamixer --source 1 --set-volume {}"
;                :orientation "v"
;                :flipped "true"
;                :class "menu-mic-scale")
;         (label :class "menu-mic-scale-text"
;                :text "󰍬"))))

(defwidget menu-close []
  (box :orientation "h"
       :class "menu-close-class"
       (button :class "menu-close-button"
               :onclick "eww close menu"
               "")))

(defwidget menu-user []
  (box :orientation "h"
       :class "menu-user-class"
       (box :class "menu-user-avatar" 
            :style "background-image: url('${AVATAR}');")
       (menu-user-one)))

(defwidget menu-user-one []
  (box :orientation "v"
       :space-evenly "false"
       :class "menu-user-one-class"
       (label :class "menu-user-good"
              :text "Good")
       (label :class "menu-user-good-two" 
              :text GOOD)
       (label :class "menu-user-date"
              :text DAT_MEN)))

(defwindow menu
            :monitor 0
            :geometry (geometry :x "-842px"
                                :y "56"
                                :width "210px"
                                :height "200px"
                                :anchor "center top")
            (box (menu-main)))

(defwidget menu-main []
  (box :orientation "h"
       :space-evenly "false"
       :hexpand "false"
       :vexpand "false"
       (menu-left)))
       ;(menu-right)))

(defwidget menu-left []
  (box :orientation "v"
       :space-evenly "false"
       (menu-top) 
       (menu-bottom)
       (menu-weather)
       (menu-close)))


(defwidget menu-bottom []
  (box :orientation "v"
       :class "menu-bottom-module"
       :hexpand "false"
       :vexpand "false"
       (menu-user)))

(defwidget menu-top [] 
  (box :orientation "h"
       :class "menu-top-module"
       :hexpand "false"
       :vexpand "false"
       (menu-power)
       (menu-info)))

(defwidget menu-info []
  (box :orientation "h"
       :class "menu-info-class"
       (circular-progress :class "mem-bar" 
                          :value MEM_MENU 
                          :thickness 8
                          (label :class "mem-bar-text"
                                 :text ""))))
(defwidget menu-power []
  (box :orientation "h"
       :class "menu-power-class"
       (menu-power-one)
       (menu-power-two)))

(defwidget menu-power-one []
  (box :orientation "v"
       :space-evenly "false"
       :spacing "0"
       (button :class "menu-power-one-off" 
               :onclick "eww close menu & eww open off-dialog" 
               "")
       (button :class "menu-power-one-reboot" 
               :onclick "eww close menu & eww open reboot-dialog"
               "󰑓")))

(defwidget menu-power-two []
  (box :orientation "v"
       :space-evenly "false"
       :spacing "0"
       (button :class "menu-power-two-exit" 
               :onclick "eww close menu & eww open exit-dialog"
               "󰈆")
       (button :class "menu-power-two-lock" 
               :onclick "eww close menu & eww open lock-dialog" 
               "󰌾")))


(defwidget menu-weather []
  (box :orientation "h"
       :class "menu-weather-class"
       (label :class "menu-weather-icon"
              :text WEATHER_ICON)
       (menu-weather-two)))

(defwidget menu-weather-two []
  (box :orientation "v"
       :space-evenly "false"
       (label :class "menu-weather-text"
              :text WEATHER)
       (label :class "menu-weather-wind"
              :text WEATHER_WIND)))
